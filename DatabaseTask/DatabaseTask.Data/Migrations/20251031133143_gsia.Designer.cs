// <auto-generated />
using System;
using DatabaseTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseTask.Data.Migrations
{
    [DbContext(typeof(DatabaseTaskDbContext))]
    [Migration("20251031133143_gsia")]
    partial class gsia
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatabaseTask.Core.Domain.BuildingCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Income")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfProjects")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BuildingCompany");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BuildingCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MachineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MachineId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tools")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingCompanyId");

                    b.HasIndex("MachineId");

                    b.HasIndex("MachineId1");

                    b.HasIndex("ProjectId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.JobTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("JobTitle");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Machine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MachineCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfMachines")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectSiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectSiteId");

                    b.ToTable("MachineEmployee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Budget")
                        .HasColumnType("int");

                    b.Property<Guid?>("BuildingCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectSiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BuildingCompanyId");

                    b.HasIndex("ProjectSiteId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.ProjectSite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Aadress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectSite");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Supplys", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PriceInBulk")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupplyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("SupplysEmployee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Employee", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.BuildingCompany", null)
                        .WithMany("EmployeeId")
                        .HasForeignKey("BuildingCompanyId");

                    b.HasOne("DatabaseTask.Core.Domain.Machine", null)
                        .WithMany("EmployeeId")
                        .HasForeignKey("MachineId");

                    b.HasOne("DatabaseTask.Core.Domain.Machine", null)
                        .WithMany("EmployeeName")
                        .HasForeignKey("MachineId1");

                    b.HasOne("DatabaseTask.Core.Domain.Project", null)
                        .WithMany("EmployeeId")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.JobTitle", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", null)
                        .WithMany("JobTitles")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Machine", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.ProjectSite", null)
                        .WithMany("MachineId")
                        .HasForeignKey("ProjectSiteId");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Project", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.BuildingCompany", null)
                        .WithMany("ProjectId")
                        .HasForeignKey("BuildingCompanyId");

                    b.HasOne("DatabaseTask.Core.Domain.ProjectSite", null)
                        .WithMany("ProjectId")
                        .HasForeignKey("ProjectSiteId");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Supplys", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Project", null)
                        .WithMany("SupplyId")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.BuildingCompany", b =>
                {
                    b.Navigation("EmployeeId");

                    b.Navigation("ProjectId");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Employee", b =>
                {
                    b.Navigation("JobTitles");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Machine", b =>
                {
                    b.Navigation("EmployeeId");

                    b.Navigation("EmployeeName");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Project", b =>
                {
                    b.Navigation("EmployeeId");

                    b.Navigation("SupplyId");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.ProjectSite", b =>
                {
                    b.Navigation("MachineId");

                    b.Navigation("ProjectId");
                });
#pragma warning restore 612, 618
        }
    }
}
